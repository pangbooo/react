origin:
    核心概念
        1）state & 生命周期 
            .可以像class添加不参加数据流的格外字段（this.timeId...）
            .state是异步的
                // Correct
                this.setState((state, props) => ({
                    counter: state.counter + props.increment
                }));
            .数据向下流动（state 只会影响下面的组件）
        
        2）事件处理


    性能优化：
        当一个组件的 props 或 state 变更，React 会将最新返回的元素与之前渲染的元素进行对比，以此决定是否有必要更新真实的 DOM。当它们不相同时，React 会更新该 DOM。
        
        < Dom结点更新的过程 >：
            1）==> shouleComponentUpdate
            2）==> vDOMEq （代表返回的 React 元素是否相同）
            
            if( （1）返回true) {

                if(（2） 相同) {
                    //不更新Dom
                }else{
                    //更新Dom
                }
                
            }else{
                //不更新Dom
            }

        Ex:
         shouldComponentUpdate(nextProps, nextState) {
            if (this.props.color !== nextProps.color) {
                return true;
            }
            if (this.state.count !== nextState.count) {
                return true;
            }
            return false;
        }

        < React.PureComponent >
        1 ）大部分情况下，你可以使用 React.PureComponent 来代替手写 shouldComponentUpdate。但它只进行【 浅比较 】。（个人理解类型与浅拷贝 ？）
        
        原码解析
        https://juejin.im/post/5c765500f265da2d9809106a  （只比较了原始数据类型和对象的第一层，深层没做处理）      
        
        